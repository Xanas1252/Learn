1.SQL
  a.it's a language
  b.A database is a collection of infos
  c.examples: Phone book, your 5 best friends, facebook's user base
  d.there is alot of places to store databases
  e.examples: computers, your mind, paper
  f.computers are the best environement for databases.(size/security/etc...)
  g.we manage data we use DBMS (Database Management systems),creat/read/update/delete
  h.CRUD stands for Creat/Read/Update/Delete infos/data in the database
  i.types of databases:
    1.relational Databases (SQL) and it's the most popualre one, it's like a excel sheet !it uses tables
    2.Non-Relational(no SQL) the oppiste of RElational
  j.an example of Realtional Databases
   ----------------------------------------------------------------------
        Username:       Password:      Email:

        Ahmed           123456789      Ahmed@gmail.com 
        amina           sfgsfdgdf      amina@gmail.com
        salah           5d4fgdfg      salah@gmail.com
        fati           sdfgd4fgd54      fati@gmail.com
-------------------------------------------------------------------------------
   k.for a Relational Databases, we nees RDBMS like MYSQL, ORACLE, POSTGRESQL
   l.A non RElational Databeses are any kind of infos but not Tables.
     1.It could be code, Document,Graphes,text .....
      2.just Like RDBMS , there NRDBMS 
   m.queries: are requests to DBMS for specific info! it's pretty much a program
                that tells DBMS to Grab an info
     ******************************************last finish at 22:15***************************************************************  

   n.RElational DB:
     1.tables and keys
       1.1 tables have columns and rows (lol)
       1.2 keys : primary keys are an info that used to differentiate between identical infos or link between tables or define relationships between them(tables)
                 example:


----------------------------------------------------------------------------------------------------
student id:                         name:                         major:

24654                               Ahmed                         SVT
54654                               ahmed                         SVT 
     
------------------------------------------------------------------------------------------------------
		    *the primary key here is the STUDENT id, the names and majors are Identical.

    o.types of primary keys:
       1.natural keys are keys that have meaning in the Real world such as CIN or Social Security number; simply they are used in other places than Database 
       2.sugorat keys are the opposite, these keys are only meaningful in the database, they are made up for the seul purpose of being in the database
       3.foreign keys are keys that link >=2 tables ! it provide us with infos from another table
*******************************************************last finish 36:18************************************************************************
       4.composite keys are keys that needs 2 attributes 

 

--------------------------------------------------------SQL BASICS-------------------------------------------------------------------------------------------
SQL = Structure Querie Language, it's almost a programming language.
 1.it's used to interacte with RDBMS(Relational Database Management system)
 2.with SQL we can ask RDMS to do CRUD or preform other helpful tasks
 3.not all SQL queries works on all RDBMS, it only needs some small tweeks to work 
 4.the concepts are the same but the implementations vary
 5.SQL is Hyprid ! it's 4 languages in 1 
   1.the four languages are DDL DQL DML DCL 
 

-------------------------------------------------Queries------------------------------------------------------------------------------------------------------
1.Queries are set of steps written in SQL with the goal to retriev some specific data

****************************************************finishes at 1 hour************************************************************
A.to use mySQL in linux: install mysql server and then type mysql in terminal and it will start
B.popular commands in sql :
  1.create database nameofdb; "creat a database"
  2.show databases; "show all the databases created"
  3.show tables; "show how many tables in a specific database"
  4.use nameofdb; "to use a specific database"
  5.select databases(); "to know what database is currently in use"
C.different basic datatypes we can store inside our database; there is few more than these 6; but these are the most common ones
   1.INT   <!--Whole numbers-->
   2.DECIMAL <!--decimal number-->
   3.VARCHAR(X is a number) <!--you can store an X number of text length-->
   4.BLOB <!--use to store binary large data! it's usually used for images etc-->
   5.DATE <!--Date-->
   6.TIMESTAMP <!--Used to record when an event happend-->
D.creating tables:
   1. the first basic querie i wrote is the following:
        CREATE TABLE phones (phone VARCHAR(10) PRIMARY KEY, color VARCHAR(6), price INT );
            what the above querie did is the following:
                       -----------------------------------------------------------------------------------------------
                        phone                             color                                           price
                       ------------------------------------------------------------------------------------------------
  2. a  good command to run is DESCRIBE nameofdatabase; >> this command will tell you alsl infos about a database
  3. to delete a table you run, DROP TABLE nameofdatabase;
  4.to modify database after creating a table we use:
    4.1 to add a part in the already existed column we use ALTER TABLE nameofdatabase ADD nameofcolumn datatype'INT or DECIMAL etc ...';
    4.2 to delete a ccolumn we use ALTER TABLE nameofdatabase drop COLUMN nameofcolumn;
----------------------------------------finished at 1:31:05 ------------------------------------------------------------------------- 
5. After creating 2 columns above in D.1, we inserted another column which th data:
         phone            color         price
 ----------------------------------------------
       samsung           red           100
       apple             green         10
-----------------------------------------------
 we did that by typing the following sql command:

      INSERT INTO nameoftable VALUES('samsung', 'red', 100);
      INSERT INTO nameofthetable VALUES('apple', 'green', 10);
 
let's say we don't have a price of one the phones, then we can't just leave it blank just like that,we type the following:
  INSERT INTO nameoftable(phone, color) VALUES('samsung', 'red');    by this we tell mysql that there is only 2 values and there is no price .
6.constraints:
6.1 NOT NULL is used in the create table querie to say that a certain data column can't be null.
6.2 UNIQUE is used in the creat table querie to say that a certain data in a column cant' be duplicated.
          example:

CREATE Table class(
  name VARACHAR(10) NOT NULL,
  major VARCHAR(20) UNIQUE,
  Age INT,
  PRIMARY KEY(major)
);
6.3 DEFAULT is used to fill the blank with an already made data in case of not entering it:
    CREAT TABLE phone(
    phone VARCHAT(20),
    color VARCHAT(10),
    price INT DEFAULT 'unknown', 
    PRIMARY KEY (phone)
 
);

INSERT INTO phone(phone, color) VALUES('apple', 'red');
 the table would look like this:

         phone            color         price
 ----------------------------------------------
       apple              red         unknown
-----------------------------------------------

6.4 AUTO_INCREMENT is used to insert numbers in a sequence , meaning that putting it when creating the table in column, it will enter numbers auto starting
         from 1.2.3 .....


******************************************UPDATE AND DELETE*******************************************************************************
1.update:
   for this, i created the following table: 
+------+----------+-----------+
| IMM  | name     | skill     |
+------+----------+-----------+
| 20   | ASSERARE | MENTALITY |
| 29   | BAKH     | STRENGTH  |
| 20   | HANAFI   | DRIBBLING |
| 6    | RIFA3I   | SPEED     |
| 5    | ZOUBAIR  | COURAGE   |
+------+----------+-----------+
let's say i wanna change/update the skills of one the guys, we do the following:
 

 UPDATE nameofthetable
 SET skill = 'longsight'
 WHERE skill = 'SPEED';


to become the following:


+------+----------+-----------+
| IMM  | name     | skill     |
+------+----------+-----------+
| 20   | ASSERARE | MENTALITY |
| 29   | BAKH     | STRENGTH  |
| 20   | HANAFI   | DRIBBLING |
| 6    | RIFA3I   | longsight |
| 5    | ZOUBAIR  | COURAGE   |
+------+----------+-----------+

other creative ways to update:

WHERE IMM = 20; 
WHERE skill = 'MENTALITY' OR skill = 'COURAGE'; 


2.DELETE:

2.1 DELETE FROM WLADDRB; this used to delete the whole table.
2.2 DELETE DROM WLADDRB WHERE IMM = 29; this to delete the column where the IMM is 29.
//////////////////////////////////////////////////////////basic queries /////////////////////////////////////////////////////////////////////////////////
getting data from the database using RDBMS
1.SELECT IS A VERY SPECIAL WORD HERE
2.We used it to display a table using SELECT * FROM table'sname;
3.we can also grab a specific data using SELECT IMM FROM WLADDRB; giving us the following output:
+------+
| IMM  |
+------+
| 20   |
| 29   |
| 20   |
| 6    |
| 5    |
+------+
4.we can use ORDER BY name/IMM/skill ASC or DESC; to display the table in order by name or IMM or skill 
  DESC from last number/character to first
  ASC from first number/character to last

5. SELECT * FROM table'sname LIMIT 3; limite the output datas to 2.
6.symboles:

   -- is a comment
   = equale
   <> not equale
   <less then
   > more then
   AND 
   OR
 7.SELECT * FROM table'sname WHERE IN ('ASSERARE', 'HANAFI', 'ZOUBAIR'); using IN(......) will only show the names written inside selecting from the table 



------------------------------------------------done 2:08:36 -----------------------------------------------------------------------------------------------
OK NOW LET'S PLAY A BIT WHITH WHAT WE KNOW!
I AM GOING TO BE CREATING A TABLE OF PHON'S INVENTORY,
THIS DATABASE SHOWS HOW MUCH SCREENS/COVERS/AND OTHER SPECS ARE AVAILABLE IN MULTIPLE PHONES'S BRANDS VERSIONS.

i created 3 tables in a database called inventory:
1.first tables called MAONA and it has phone's brands:
+---------+
| brands  |
+---------+
| 1+      |
| APPLE   |
| DELL    |
| GOOGLE  |
| HP      |
| HUEWAI  |
| NEXUS   |
| OPPO    |
| SAMSUNG |
| XAOMI   |
+---------+
2. the second table is called apple:   
+-----------+---------+--------+-------+
| version   | screens | covers | specs |
+-----------+---------+--------+-------+
| IphonX    |       5 |     10 |     0 |
| Iphon6    |      54 |      0 |    46 |
| Iphone8   |       2 |     45 |    12 |
| Iphone S  |      54 |     54 |    12 |
| Iphone 45 |     346 |     54 |    21 |
+-----------+---------+--------+-------+
3.third is called samsung:

+---------+---------+--------+-------+
| version | screens | covers | specs |
+---------+---------+--------+-------+
| S3      |      45 |     45 |     0 |
| S9      |      16 |    897 |     4 |
| NOTE9   |       4 |    654 |     5 |
| NOTE4   |      54 |      5 |    46 |
| S7      |      54 |     54 |     2 |
+---------+---------+--------+-------+


learned doing this:

practiced sql.
learned to rename a table by using ALTER TABLE nameoftable RENAME TO newtable'sname;



--------------------------------------------------company databse intro-------------------------------------------------------------------------------------
in thlis section we are going to make a complicated databes for a company
 the reason being that we need complex databases with multiple tables that are connected to understand some MYSQL concepts.

1.TO add the primary key  for a tabel:
ALTER TABLE nameofthetable
ADD PRIMARY KEY (XXXXX
); 
---------------------------------------------------------02:20:26-----------------------------------------------------------------------------------------

more basic queries:
1. querie one: find all employees: 
    SELECT first_name, last_name FROM employee ;
2.querie 2: find all employess ordered by name;
   SELECT first_name, last_name FROM employee ORDER BY first_name ASC;
3.querie 3: find by sex and then name:
  SELECT * FROM employee ORDER BY sex, first_name;
4.QUERIE 4: find 5 first employees:
   SELECT * FROM employee LIMIT 5;
5.querie 5: replace a column name by another :
 SELECT first_name AS smiya , last_name AS kniya FROM employee; the table's column's names were originally created as first_name and last_name but with the
    querie above , they became smiya and kniya.
       NEW KEYWORD:

DISTINCT: USED TO KNOW TYPES OF DATA ENTERD;
 SELECT DISTINCT sex FROM employee; let's say we have a table of sex like this 
+------+
| sex  |
+------+
| F    |
| F    |
| F    |
| M    |
| M    |
| M    |
| M    |
| M    |
| M    |
+------+
we can use destinct to figure out the types of genders there are in that table, and the output would be the following:
+------+
| sex  |
+------+
| M    |
| F    |
+------+
*/*/*/**/**/*/*/**/*/*/**/*/**//**/*/*/*/*/*/*/*/*/*/*/*/*/*/FUNCTIONS**/*/*/*/*/*/*/*////////////////***/**/**/*//**/*/*//*/*/**/*//**/*/*/*/*/*/*/
 1.functions are blocks of codes that would do something for us
  1.1 count() is function to count:
       for example , we can count how many employees are there 
                 SELECT count(first_name) FROM employee; or SELECT count(last_name) FROM employee;
                  SELECT COUNT(emp_id) FROM employee WHERE sex='F' AND birth_day > '1971-01-01'; we can count with this how many females are born after 1970
  1.2 AVG() this to get the average number of a column of numbers: you can get the average number of employee's salaries using:
            SELECT AVG(salary) FROM employee;
+-------------+
| AVG(salary) |
+-------------+
|  92888.8889 |
+-------------+

  1.3 SUM() TO KNOW HOW MUCH THE COMPANY PAY IT'S EMPLOYEES:
     SELECT SUM(salary) FROM employee;
+-------------+
| SUM(salary) |
+-------------+
|      836000 |
+-------------+
-money cash hh-

   1.4 SELECT COUNT(sex),sex FROM employee GROUP BY sex; this will will how many males and females are there.
   1.5 SELECT SUM(total_sales),emp_id FROM works_with GROUP BY emp_id; this will output how much each emlpoyee made for the company.


    -----------------------------------------------------2:45:13------------------------------------------------------------------------------
WILDCARDS AND THE LIKE KEYWORD:
 1.WILDCARD ARE A WAY TO GRAB DATA TO MATCH A SPECIFIC PATTERNS
   EXC1: FIND ANY CLIENTS THAT ARE IN LLC ON A TABLE
   LIKE IS A WORD USED ALOGSIDE WILDCARDS
      how to: SELECT * FROM client WHERE client_name LIKE'%LLC'; this command will output any row/data that has LLC on it 
        LIKE is necessary and the % sign means any number of characters
      SELECT * FROM branch_supllier WHERE supllier_name LIKE '%label%' ; putting to % signs will output any row that contain that word in general, but
          when putting one % sign ,it will only output a row with that exact word.

-----------------------------------------------2:52:16 went to  read documetation--------------------------------------------------------------------------


selecting all the employees that were born in october
  SELECT * FROM employee WHERE birth_day LIKE'____-10%';  the new thing here is the ____, those for dashes means the year, followed by -10 which is the month
   it really depends on the format of the birth_day, 


  *find any clients who are schools * so thinking about this, we wanna find any clients that have the word school on their name
   we will use the following code: SELECT * FROM client WHERE client_name LIKE '%school%';

----------------union---------------------------------------------------
it's a special sql operator;
 it can be used to combine multiple select operations;
  UNION IS EASY TO USE:
  ALL YOU HAVE TO DO IS ADD THE WORD UNION BETWEEN THE TWO SELECTS
   SELECT first_name FROM employee UNION SELECT branch_name FROM branch;
+------------+
| first_name |
+------------+
| David      |
| Jan        |
| Michael    |
| Angela     |
| Kelly      |
| Stanley    |
| Josh       |
| Andy       |
| Jim        |
| CORPORATE  |
| SCRANTON   |
| STAMFORD   |
+------------+
rules to union ; you have to grab the same numbers of columns from each select and the datatypes have to be similar.
you can use unions as much times as you want 

you can also use functions when selecting and using union :
SELECT SUM(salary) AS spent FROM employee UNION SELECT SUM(total_sales) AS earned FROM works_with;
--------------------------------------------------------------------------joins in sql-------------------------------------------
joins are used to combine infos from different tables with a shared column.
  THIS IS THE GOOD STUFF
 SELECT employee.emp_id, employee.first_name, branch.branch_name FROM employee JOIN branch ON employee.emp_id = branch.mgr_id;
 
+--------+------------+-------------+
| emp_id | first_name | branch_name |
+--------+------------+-------------+
|    100 | David      | Corporate   |
|    102 | Michael    | Scranton    |
|    106 | Josh       | Stamford    |
+--------+------------+-------------+

4 basic types of joins:
  1.inner join is join like the example above
  2.left join 
  3.right join
  4.full join but not used 


------------------------------------------------------------------------------------nested queries------------------------------------------------------
more advenced queries
SELECT employee.first_name, employee.last_name FROM employee WHERE employee.emp_id IN ( SELECT works_with.emp_id FROM works_with WHERE total_sales > 30000);
 is an exampl of a nested querry.
 we used IN() and put another sql statement inside of IN().
 baissaclly what the nested query above does is look for all the total sales over 30000 in the works_with table, take the emp_id of those and then give it to 
  the first statement where it looks for those emp_id taken from the child sql statement and display it's first and last name.


--------------------------------------------------------03:17:08-----------------------------------------------------------------------
find all clients managed by scott 
SELECT client.client_name FROM client WHERE client.branch_id = (SELECT branch.branch_id FROM branch WHERE mgr_id = 102);
this will output all the clients that are managed by scott


------------------------------------------on delete --------------------------------------------------------------------------------
a scenario to understand wtf:

let's say we deleted michael scott from the database;given that scott 
 is the only employee who posses the mgr_id 102; 102 exist in another table 
  which the branch table
   so what's gonna happen to the that mgr_id in the branch table if scott 
     got deleted from the database knowing that he is the only one that got 
      that mgr_id ?

the answer is that we gonna use on delete cascade
  that 102 will be set to null
 
 we acheived this by using <<ON DELETE SET NULL>>  when creating the table.

 there is also <<on delete cascade>> which means that all the rows that has a certain 
   key are gonna get deleted
   we use on delete cascade on rows that can't be null
**--*--*--**-*--**-*-*-*-*-*-*-*-*-triggers -*-**---*-*-*-*-**-*--**--*-**--*

it's a block of code that will tell mysql to do something when another happend 

they can be extremely helpful and powrefull
FINMA DAKHEL HNA , DAKHEL LHIH

WHENEVER YOU ENTER SOMETHING IN table1 , enter this 'XXXx' in table 2




example: the following code will achieve the following results
         whenever a new row added into the table employee >> add a row that
             says add new row in the tirger table

steps
 1.create the triger table.
 2.insert this >> DELIMITER $$ 
 3.then insert the trigger itself >> CREATE TRIGGER my_trigger BEFORE INSERT ON
    employee FOR EACH ROW BEGIN INSERT INTO trigger_test VALUES('add new row');
       END $$
 4.DELIMITER ;
 5.INSERT INTO employee VALUES(109, 'oscar', 'martinez', '1962-02-01', 'M', 69000, 106, 3);

another trigger:
CREATE TRIGGER my_trigger BEFORE INSERT ON
    employee FOR EACH ROW BEGIN INSERT INTO trigger_test VALUES('NEW.first_name');
       END $$
    this trigger will output new employee's name inserted in the table employee 
       , will output it in the triger table


more complexe trigger
 the following triggers use conditions (if, else)                    


ER DIAGRAMS ---------------------------------------------------------------------

company give you database written document in english >>>> you design a ER 
  diagram >>> you code that er diagram


an example of a database written in a document in english

-*-*-*-**-*--****************--*---**--*-*-*-*-*-*-*-*-*-*-*-*-**--**--****--*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-**-*-*-*-*-**--*-*-*--*-*-*-*
   The company is organized into branches. Each branch has a unique number, a name, and a particular employee who manages it.

The company makes it’s money by selling to clients. Each client has a name and a unique number to identify it.

The foundation of the company is it’s employees. Each employee has a name, birthday, sex, salary and a unique number.

An employee can work for one branch at a time, and each branch will be managed by one of the employees that work there. We’ll also want to keep track of when the current manager started as manager.

An employee can act as a supervisor for other employees at the branch, an employee may also act as the supervisor for employees at other branches. An employee can have at most one supervisor.

A branch may handle a number of clients, with each client having a name and a unique number to identify it. A single client may only be handled by one branch at a time.

Employees can work with clients controlled by their branch to sell them stuff. If nescessary multiple employees can work with the same client. We’ll want to keep track of how many dollars worth of stuff each employee sells to each client they work with.

Many branches will need to work with suppliers to buy inventory. For each supplier we’ll keep track of their name and the type of product they’re selling the branch. A single supplier may supply products to multiple branches.  
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*/*--*--*-*-*-*-*-*--**-*-*-*-*-*-*-*-*-*-*-*-**-**--**--*-*-*-*-*

let's turn this to a ER diagram

--/////////////////////////////////////////////////////////////////////4:07:49/////////////////////////////////////////////////////////////////////////////////
 so what i did is that i designed a ER DIAGRAMS based on the text provided by mike's course and then i coded it
  and then i coded another database based on the ER he created 


my ER + code : 
+----------------------+
| Tables_in_my_company |
+----------------------+
| branches             |
| clients              |
| employees            |
| sells                |
| supplier             |
+----------------------+
his ER and my code:
+------------------------+
| Tables_in_mike_company |
+------------------------+
| branch                 |
| client                 |
| employee               |
| suppliers              |
+------------------------+
his ER and his code:
his ER and code is bassacly what we have been working on the whole time

pics in project*
you can see tables detailed in the project folder*


NOTES:
expand varchar by using == ALTER TABLE test MODIFY COLUMN nameofcolumn VARCHAR (500);
DELETE FROM employee WHERE emp_id =102 ; to delete a line in a table
delete triggers with DROP TRIGGER my_trigger;
IN ER DIAGRAMS: DOUBLE LINE MEANS ALL AND SINGLE LINE MEANS NOT 
how to select alll data from a table but a specific data 

Use the NOT keyword to select all records where City is NOT "Berlin".
SELECT * FROM Customers
WHERE NOT City = 'Berlin';



Select all records from the Customers where the PostalCode column is empty.
SELECT * FROM Customers
WHERE PostalCode IS NULL  ;

Select all records from the Customers where the PostalCode column is NOT empty.
SELECT * FROM Customers
WHERE PostalCode IS NOT NULL  ;
  

select min or max number in a column with

SELECT MIN(column_name)
FROM table_name
WHERE condition; 

SELECT MAX(column_name)
FROM table_name
WHERE condition; 

select records from table where it starts with an a and ends b
SELECT * FROM TABLE WHERE COLUMN LIKE 'a%b';

select all records but the ones that start with an a
SELECT * FROM TABLE WHERE COLUMN NOT LIKE 'a%';

select all records that starts with an 'a' or 'c' or 's' from a table
SELECT * FROM TABLE WHERE COLUMN LIKE '[acs]%';

select all records but the one that start with an 'a' or 'f'from a table
SELECT * FROM TABLE WHERE COLUMN LIKE '[a-f]%';

select all records that does not starts with an 'a' or 'c' or 's' from a table
SELECT * FROM TABLE WHERE COLUMN LIKE '[^acs]%';

Use the BETWEEN operator to select all the records where the value of the Price column is between 10 and 20.
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

TRUNCATE TABLE test; this wil delete all the data inside a table but not the table itself
 

offset X ; used to get the next X numbers of data

